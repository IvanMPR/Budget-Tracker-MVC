{"mappings":"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","sources":["js_modules/model.js","js_modules/view.js","src/controller.js"],"sourcesContent":["class Model {\r\n  constructor() {\r\n    this.entriesArray = localStorage.getItem('entries')\r\n      ? JSON.parse(localStorage.getItem('entries'))\r\n      : [];\r\n    this.stateObject = {\r\n      incomes: 0,\r\n      expenses: 0,\r\n      total: 0,\r\n      percentage: 0,\r\n      storage: {\r\n        id: '',\r\n      },\r\n    };\r\n  }\r\n  // Push single entry to entries array\r\n  pushEntry(obj) {\r\n    // prevent pushing undefined to entries array(could happen if one of the required inputs is missing)\r\n    if (!obj) return;\r\n    else this.entriesArray.push(obj);\r\n  }\r\n  // Generic function to filter and calculate array sum\r\n  calcSum(type, arr) {\r\n    return arr\r\n      .filter(entry => entry.type === type)\r\n      .map(entry => entry.value)\r\n      .reduce((acc, curr) => acc + Number(curr), 0);\r\n  }\r\n  // Calculate and update Modal internal data\r\n  parseDataFromEntries() {\r\n    const incomesSum = this.calcSum('incomes', this.entriesArray);\r\n    const expensesSum = this.calcSum('expenses', this.entriesArray);\r\n\r\n    this.stateObject.incomes = incomesSum;\r\n    this.stateObject.expenses = expensesSum;\r\n    this.stateObject.total = incomesSum - expensesSum;\r\n    const percentage =\r\n      (this.stateObject.expenses / this.stateObject.incomes) * 100;\r\n\r\n    if (isNaN(percentage) || percentage === Infinity || percentage < 0) {\r\n      this.stateObject.percentage = '---';\r\n    } else if (percentage % 1 !== 0) {\r\n      this.stateObject.percentage = `${percentage.toFixed(1)} %`;\r\n    } else {\r\n      this.stateObject.percentage = `${percentage} %`;\r\n    }\r\n\r\n    return this.stateObject;\r\n  }\r\n  // Function to store Modal internal updated data\r\n  updateState() {\r\n    this.parseDataFromEntries();\r\n  }\r\n  // Find entry in entries arr by it's id, delete it, return modified entries arr\r\n  deleteEntry(id) {\r\n    const transformedEntriesArr = this.entriesArray.map(entry => entry.id);\r\n    const index = transformedEntriesArr.indexOf(id);\r\n    this.entriesArray.splice(index, 1);\r\n  }\r\n  // Find entry by it's id. Used for editing entry data\r\n  findEntry(id) {\r\n    return this.entriesArray.filter(entry => entry.id === id)[0];\r\n  }\r\n  // Modify entry with new data\r\n  editEntry(id, newDesc, newVal) {\r\n    this.entriesArray.map(entry => {\r\n      if (entry.id !== id) return entry;\r\n      else {\r\n        entry.desc = newDesc;\r\n        entry.value = newVal;\r\n        return entry;\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default Model;\r\n","class View {\r\n  constructor() {\r\n    this.type = document.getElementById('inp');\r\n    this.desc = document.querySelector('.inputs__description--input');\r\n    this.val = document.querySelector('.inputs__value--num');\r\n    this.button = document.querySelector('.inputs__submit--btn');\r\n    this.editButton = document.querySelector('.inputs__submit--edit');\r\n    this.incList = document.querySelector('.transactions__incomes--ul');\r\n    this.expList = document.querySelector('.transactions__expenses--ul');\r\n    this.currentSum = document.querySelector('.amounts__current--p');\r\n    this.currentInc = document.querySelector('.amounts__income--p');\r\n    this.currentExp = document.querySelector('.amounts__expense--p');\r\n    this.iconButtonsParent = document.querySelector('.transactions');\r\n    this.percentage = document.querySelector('.amounts__expense--s');\r\n  }\r\n  // Hide Add value button, show Edit button, set focus and populate fields with old values\r\n  addEditClass(oldDesc, oldVal) {\r\n    this.button.classList.add('hidden');\r\n    this.editButton.classList.remove('hidden');\r\n    this.desc.value = oldDesc;\r\n    this.desc.focus();\r\n    this.val.value = oldVal;\r\n  }\r\n  // Clear inputs and return focus to description field\r\n  clearFields() {\r\n    this.desc.value = '';\r\n    this.val.value = '';\r\n    this.desc.focus();\r\n  }\r\n  // Create single entry\r\n  createEntry() {\r\n    if (this.desc.value === '' || !this.val) {\r\n      alert('Please fill in all fields!');\r\n      this.clearFields();\r\n      return;\r\n    }\r\n\r\n    const entry = {\r\n      type: this.type.value,\r\n      desc: this.desc.value,\r\n      value: this.val.value,\r\n      id: this.type.value.slice(0, 1).toUpperCase() + Date.now(),\r\n    };\r\n\r\n    this.clearFields();\r\n    return entry;\r\n  }\r\n  // Render entries (from entries array)\r\n  renderEntries(arr) {\r\n    this.incList.innerHTML = '';\r\n    this.expList.innerHTML = '';\r\n    arr.forEach(entry => {\r\n      const entryHtml = `\r\n    <li class=\"transactions__${entry.type}--li\" data-id=\"${entry.id}\">\r\n      <p class=\"transactions__description transactions__incomes--p\">${entry.desc}</p>\r\n      <p class=\"transactions__value transactions__incomes--p\">${entry.value}\r\n        <span class=\"edit\"><i title=\"Edit entry\" class=\"fa-solid fa-pen-to-square edit-icon\"></i></span>\r\n        <span title=\"Delete entry\" class=\"delete\"><i class=\"fa-solid fa-trash-can delete-icon\"></i></span>\r\n      </p>\r\n   </li>`;\r\n\r\n      document\r\n        .querySelector(`.transactions__${entry.type}--ul`)\r\n        .insertAdjacentHTML('beforeend', entryHtml);\r\n    });\r\n  }\r\n  // Update screen with updated values\r\n  updateSum(obj) {\r\n    this.currentSum.textContent = this.formatAmount(obj.total);\r\n    this.currentInc.textContent = this.formatAmount(obj.incomes);\r\n    this.currentExp.textContent = this.formatAmount(obj.expenses);\r\n    this.percentage.textContent = obj.percentage;\r\n  }\r\n\r\n  formatAmount(amount) {\r\n    return amount.toLocaleString('en-US', {\r\n      style: 'currency',\r\n      currency: 'USD',\r\n    });\r\n  }\r\n}\r\n\r\nexport default View;\r\n","import Model from '../js_modules/model.js';\r\nimport View from '../js_modules/view.js';\r\n\r\nclass Controller {\r\n  constructor(m, v) {\r\n    this.m = m;\r\n    this.v = v;\r\n  }\r\n  // Controller method to clear input fields and reset temporary storage variable to ''\r\n  ctrlClearFields() {\r\n    this.v.clearFields();\r\n    this.m.stateObject.storage.id = '';\r\n  }\r\n  // Controller method to return created entry\r\n  ctrlEntry() {\r\n    const object = this.v.createEntry();\r\n    return object;\r\n  }\r\n  // Controller method to push entry(v) into entries arr(m)\r\n  ctrlPushEntry() {\r\n    this.m.pushEntry(this.ctrlEntry());\r\n  }\r\n  // Controller method to update internal Model state\r\n  ctrlUpdateState() {\r\n    this.m.updateState();\r\n  }\r\n  // Controller method to render entries\r\n  ctrlRenderEntries() {\r\n    this.v.renderEntries(this.m.entriesArray);\r\n  }\r\n  // Controller method to update sum\r\n  ctrlUpdateSum() {\r\n    this.v.updateSum(this.m.stateObject);\r\n  }\r\n  // Controller combined method to create entry and update both model and view\r\n  ctrlAddEntry() {\r\n    this.ctrlPushEntry();\r\n    this.ctrlUpdateEntries();\r\n  }\r\n  // Controller method to call m.deleteEntry\r\n  ctrlDeleteEntry(id) {\r\n    this.m.deleteEntry(id);\r\n  }\r\n  // Controller combined method to delete entry and update both model and view\r\n  ctrlDeleteSequence(e) {\r\n    const id = e.target.closest('li').dataset.id;\r\n    this.ctrlDeleteEntry(id);\r\n    this.ctrlUpdateEntries();\r\n  }\r\n  // Controller combined method to update model and view after changes\r\n  ctrlUpdateEntries() {\r\n    this.ctrlUpdateState();\r\n    this.ctrlUpdateSum();\r\n    this.ctrlRenderEntries();\r\n  }\r\n  // Controller method to edit entry\r\n  ctrlEditEntry(id, newDesc, newVal) {\r\n    this.m.editEntry(id, newDesc, newVal);\r\n  }\r\n  // Controller method for calling v.addEditClass\r\n  ctrlAddEditClass(oldDesc, oldVal) {\r\n    this.v.addEditClass(oldDesc, oldVal);\r\n  }\r\n  // Controller combined method for getting and storing id, description and value to be edited\r\n  ctrlEditFirstSequence(e) {\r\n    const id = e.target.closest('li').dataset.id;\r\n    this.m.stateObject.storage.id = id;\r\n    const currentEntry = this.ctrlFindEntry(id);\r\n    const oldValue = currentEntry.value;\r\n    const oldDesc = currentEntry.desc;\r\n\r\n    this.ctrlAddEditClass(oldDesc, oldValue);\r\n  }\r\n  // Controller combined method to swap old description and value with new ones, and update accordingly\r\n  ctrlEditLastSequence(id, newDesc, newVal) {\r\n    this.ctrlEditEntry(id, newDesc, newVal);\r\n    this.ctrlUpdateEntries();\r\n    this.ctrlRemoveEditClass();\r\n  }\r\n  // Controller combined method for hiding edit button, showing add entry button, and clearing fields\r\n  ctrlRemoveEditClass() {\r\n    this.v.editButton.classList.add('hidden');\r\n    this.v.button.classList.remove('hidden');\r\n    this.ctrlClearFields();\r\n  }\r\n  // Controller method for finding desired entry\r\n  ctrlFindEntry(id) {\r\n    return this.m.findEntry(id);\r\n  }\r\n  // Controller combined method for adding event listeners\r\n  listeners() {\r\n    // Add entry on button click\r\n    this.v.button.addEventListener('click', this.ctrlAddEntry.bind(this));\r\n    // Add entry on 'Enter' press\r\n    document.addEventListener('keydown', e => {\r\n      // If add entry button is visible (doesn't have a 'hidden' class), addEntry will trigger\r\n      if (e.key === 'Enter' && !this.v.button.classList.contains('hidden'))\r\n        this.ctrlAddEntry();\r\n      // If edit button is visible (doesn't have a 'hidden' class ) editLastSequence will trigger\r\n      else if (\r\n        e.key === 'Enter' &&\r\n        !this.v.editButton.classList.contains('hidden')\r\n      )\r\n        this.ctrlEditLastSequence(\r\n          this.m.stateObject.storage.id,\r\n          this.v.desc.value,\r\n          this.v.val.value\r\n        );\r\n    });\r\n    // Click on Font Awesome delete icon, to delete entry\r\n    this.v.iconButtonsParent.addEventListener('click', e => {\r\n      if (!e.target.classList.contains('delete-icon')) return;\r\n      else this.ctrlDeleteSequence(e);\r\n    });\r\n    // Click on Font Awesome edit icon, to begin the first sequence of editing\r\n    this.v.iconButtonsParent.addEventListener('click', e => {\r\n      if (!e.target.classList.contains('edit-icon')) return;\r\n      else this.ctrlEditFirstSequence(e);\r\n    });\r\n    // Click on Edit button to apply changes\r\n    this.v.editButton.addEventListener('click', () => {\r\n      this.ctrlEditLastSequence(\r\n        this.m.stateObject.storage.id,\r\n        this.v.desc.value,\r\n        this.v.val.value\r\n      );\r\n    });\r\n\r\n    window.addEventListener('beforeunload', () => {\r\n      localStorage.setItem('entries', JSON.stringify(this.m.entriesArray));\r\n    });\r\n\r\n    window.addEventListener('load', () => {\r\n      if (localStorage.getItem('entries')) {\r\n        this.ctrlUpdateEntries();\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nconst app = new Controller(new Model(), new View());\r\n\r\napp.listeners();\r\n"],"names":["$607bafbbe6535d8c$export$2e2bcd8739ae039","constructor","this","entriesArray","localStorage","getItem","JSON","parse","stateObject","incomes","expenses","total","percentage","storage","id","pushEntry","obj","push","calcSum","type","arr","filter","entry","map","value","reduce","acc","curr","Number","parseDataFromEntries","incomesSum","expensesSum","isNaN","Infinity","toFixed","updateState","deleteEntry","index","indexOf","splice","findEntry","editEntry","newDesc","newVal","desc","document","getElementById","querySelector","val","button","editButton","incList","expList","currentSum","currentInc","currentExp","iconButtonsParent","addEditClass","oldDesc","oldVal","classList","add","remove","focus","clearFields","createEntry","alert","slice","toUpperCase","Date","now","renderEntries","innerHTML","forEach","entryHtml","insertAdjacentHTML","textContent","formatAmount","amount","m","v","ctrlClearFields","ctrlEntry","ctrlPushEntry","ctrlUpdateState","ctrlRenderEntries","ctrlUpdateSum","updateSum","ctrlAddEntry","ctrlUpdateEntries","ctrlDeleteEntry","ctrlDeleteSequence","e","target","closest","dataset","ctrlEditEntry","ctrlAddEditClass","ctrlEditFirstSequence","currentEntry","ctrlFindEntry","oldValue","ctrlEditLastSequence","ctrlRemoveEditClass","listeners","addEventListener","bind","key","contains","window","setItem","stringify","$8413871e2c8f7011$export$2e2bcd8739ae039"],"version":3,"file":"index.115f5fb6.js.map"}